openapi: 3.0.3
info:
  title: 60ASO / ARQUITETURA MICROSERVIÇOS / API E DIGITALOPS
  description: |-
    
    Essa específicação é composta das APIs que foram descritas no catalogo de serviço como resposta da atividade do projeto InvestX.
    
    Aqui estão descritas APIs internas e externas.
    
    As APIs externas (com o path começando com /external), serão consumidas pelo BFF e tem como requisito a requisição ser autenticada, usando a requisição definida na camada de autenticação.
    
    As APIs internas (com o path começando com /internal), serão consumidas por serviços internos, e não tem a necessidade da requisição ser autenticada.
    
    Autenticação via client credentials
    recursos com /external serão consumidos por clientes externos, por isso precisam ser autenticados e precisam para autenticação.
    
  contact:
    email: icarodemorais@hotmail.com
  version: 1.0.0
servers:
  - url: https://investx.fiap.com/60aso/v1
tags:
  - name: authentication-layer
    description: Camada de autenticação via client-credentials que deve ser utilizada para a emissão do token que viabilizara o consumo de recursos externos.
  - name: customer-management
    description: Recursos externos que expõem as capacidades relacionadas a gestão de cliente, como criação e busca.
  - name: transaction-management
    description: Recursos externos que expõem as capacidades relacionadas a gestão de uma transação, como busca e trigger de processamento.
  - name: transaction-orchestrator
    description: Recurso interno que viabilizara o inicio do processamento de uma transação. Esse recurso é exposto pelo serviço que será responsável pela orquestração das jornadas necessárias para uma transação ser processada. Essas jornadas não fizeram parte do catalogo de serviço e por conta disso não fizeram parte dessa especificação.
  - name: transaction-data
    description: Recursos interno que expõem as capacidades relacionadas a gestão de transações. Esses recursos são expostos pelo serviço que tem as responsabilidades de viabilizar validações na camada de persistência, centralizar e, de fato, realizar a comunicação com o banco de dados.
  - name: customer-data
    description: Recursos interno que expõem as capacidades relacionadas a gestão de clientes. Esses recursos são expostos pelo serviço que tem as responsabilidades de viabilizar validações na camada de persistência, centralizar e, de fato, realizar a comunicação com o banco de dados.
    
paths:
  /external/oauth/token:
    post:
      tags:
        - authentication-layer
      summary: Geração de um novo token
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /external/customers:
    post:
      tags:
        - customer-management
      summary: Adiciona um novo cliente
      description: Adiciona um novo cliente
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /external/customers/{customerId}:
    get:
      tags:
        - customer-management
      summary: Consulta os dados do cliente através do id
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: Identificador unico do cliente
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    put:
      tags:
        - customer-management
      summary: Atualiza dados de clientes
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: Identificador unico do cliente
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
        required: true
      responses:
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /external/customers/{customerId}/status:
    patch:
      tags:
        - customer-management
      summary: Atualiza status de clientes
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: Identificador unico do cliente
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Atualiza status dos clientes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerStatusRequest'
        required: true
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatus'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /external/transaction/{transactionId}:
    get:
      tags:
        - transaction-management
      summary: Busca de transação por Id
      security:
        - bearerAuth: []
      description: ''
      parameters:
        - name: transactionId
          in: path
          description: identificador único da transação
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /external/transaction/{transactionId}/process:
    post:
      tags:
        - transaction-management
      summary: Inicia o processamento de uma transação
      security:
        - bearerAuth: []
      parameters:
        - name: transactionId
          in: path
          description: Identificador unico da transação
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Solicitação de processamento de transação registrada com sucesso
        '400':
          description: Transação invalida ou não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /internal/transaction/{transactionId}/process:
    post:
      tags:
        - transaction-orchestrator
      summary: Processa transação
      parameters:
        - name: transactionId
          in: path
          description: Identificador unico da transação
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Solicitação de processamento de transação registrada com sucesso
        '400':
          description: Transação invalida ou não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /internal/customers:
    post:
      tags:
        - customer-data
      summary: Adiciona um novo cliente
      description: Adiciona um novo cliente
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCustomerInternal'
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /internal/customers/{customerId}:
    get:
      tags:
        - customer-data
      summary: Consulta os dados do cliente através do id
      parameters:
        - name: customerId
          in: path
          description: Identificador unico do cliente
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
    put:
      tags:
        - customer-data
      summary: Atualiza dados de clientes
      parameters:
        - name: customerId
          in: path
          description: Identificador unico do cliente
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
        required: true
      responses:
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /internal/customers/{customerId}/status:
    patch:
      tags:
        - customer-data
      summary: Atualiza status de clientes
      parameters:
        - name: customerId
          in: path
          description: Identificador unico do cliente
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Atualiza status dos clientes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerStatusRequest'
        required: true
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerStatus'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /internal/transaction:
    post:
      tags:
        - transaction-data
      summary: Cadastra transação
      requestBody:
        description: Cadastra transação
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /internal/transaction/{transactionId}:
    get:
      tags:
        - transaction-data
      summary: Consulta transações
      parameters:
        - name: transactionId
          in: path
          description: Identificador único da transação
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
  /internal/transaction/{transactionId}/idempotency:
    post:
      tags:
        - transaction-data
      parameters:
        - name: transactionId
          in: path
          description: Identificador único da transação
          schema:
            type: string
          required: true
      summary: Registra idempotencia de uma transação
      requestBody:
        description: Cadastra transação
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionEvent'
        required: true
      responses:
        '200':
          description: Requisição processada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'          
        '400':
          description: Corpo da requisição com informações invalidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Erro interno ao realizar requisição
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
components:
  schemas:
    PostCustomerInternal:
      type: object
      allOf:
        - $ref: '#/components/schemas/Customer'
        - $ref: '#/components/schemas/CustomerStatus'
    UpdateCustomerStatusRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CustomerStatus'
    UpdateCustomerRequest:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
    CustomerResponse:
      type: object
      required:
          - id
          - customer
          - status
      properties:
        id:
          type: string
          format: uuid
          description: Mesmo o cpf do cliente sendo persistido, ele não pode ser transitado entre os serviços sem a necessidade, por conta disso um identificador único aleatório foi definido.
        customer:
          $ref: '#/components/schemas/Customer'
        status:
          $ref: '#/components/schemas/CustomerStatus'
    CustomerStatus:
      type: object
      description: Objeto que agrega o status transacional do cliente e, em caso de inativo, o motivo da inativação
      properties:
        active:
          type: boolean
          description: Flag informando se o cliente está ativo ou não
        inactivationReason:
          type: string
          enum: [ONBOARD, FRAUD, OTHER]
          description: |
            Enum com o motivo de inativação do cliente
            Onboard: Alguma informação fornecida no cadastrado está incorreta ou o processo de análise do cadastro ou ainda não foi concluído ou teve um resultado negativo.
            Fraud: O cliente foi inativado por analise de fraude.
            Other: O cliente foi inativado por outro motivo não detalhado.
    Customer:
      type: object
      properties:
        name:
          type: string
        lastName:
          type: string
        bithdate:
          type: string
        document:
          type: object
          properties:
            type:
              type: string
              enum: [CPF, PASSPORT]
            number:
              type: string
        contact:
          type: object
          description: Objeto que contém as informações de contato do cliente
          properties:
            email:
              type: string
              format: email
            businessPhone:
              type: string
            personalPhone:
              type: string
        address:
          type: object
          description: Objeto que contém as informações do endereço físico do cliente
          properties:
            country:
              type: string
            state:
              type: string
            city:
              type: string
            street:
              type: string
            number:
              type: string
            zipcode:
              type: string
            details:
              type: string
    TransactionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: identificador único da transação
      allOf:
        - $ref: '#/components/schemas/Transaction'
    Transaction:
      type: object
      properties:
        customerId:
          type: string
          description: Identificador do cliente dono da transação
        operationType:
          type: string
          enum: [BUY, SELL]
          description:  |
            BUY: indica se o registro em questão se refere a compra de algum ativo
            SELL: indica se o registro em questão se refere a venda de algum ativo
        status:
          type: string
          enum: [PEINDING, PENDING_APPROVALS, ON_QUEUE, PROCESSING, SUCCESS, FAILURE, DENIED]
          description: |
            Campo faz referência ao estado atual da transação
            PEINDING: indica que o processamento da transação está pendente 
            PENDING_APPROVALS: indica que foi identificado a necessidade de aprovações manuais e elas estão pendentes
            ON_QUEUE: indica que a transação foi agendada para ser processada
            PROCESSING: indica que a transação está sendo processada
            SUCCESS: status final que indica que a transação foi processada com sucesso
            FAILURE: status final que indica que a transação foi processada com erro
        idempotence:
          type: array
          items:
            $ref: '#/components/schemas/TransactionEvent'
        approvals:
          type: object
          description: Objeto que contempla o status das aprovações, quando pertinente
          properties:
            frauds:
              type: boolean
            backoffice:
              type: boolean
        asset:
          type: object
          description: Objeto que contempla as informações sobre o ativo negociado na transação
          properties:
            id:
              type: string
              description: Identificador único do ativo
            unityValue:
              type: string
              description: Valor unitário do ativo
            quantity:
              type: string
              description: Quantidade de unidades que estão sendo negociadas
        requestedDate:
          type: string
          format: date
          description: Data de quando a transação foi solicitada
        processedDate:
          type: string
          format: date
          description: Data de quando o processamento da transação foi concluído
    TransactionEvent:
      type: object
      properties:
        type:
          type: string
          enum: [REQUEST_TO_PROCESS, APPROVALS_GRANTED, APPROVALS_DENIED, MOVED_TO_PROCESSING_QUEUE, START_TO_PROCESS, PROCESS_RESULTED_ERROR, PROCESS_RESULTED_ERROR]
          description: |
            REQUEST_TO_PROCESS: solicitação de processamento de transação recebida
            APPROVALS_GRANTED: aprovação concedida 
            APPROVALS_DENIED: aprovação negada 
            MOVED_TO_PROCESSING_QUEUE: movimentação para fila de processamento
            START_TO_PROCESS: inicio de processamento
            PROCESS_RESULTED_ERROR: processamento resultou em erro
            PROCESS_RESULTED_SUCCESS: processamento resultou em sucesso
        origin: 
          type: string
          enum: [USER, FRAUD, BUSINESS, AUTOMATIC]
          description:  |
            USER: evento registrado tendo como origem uma solicitação do cliente
            FRAUD: evento registrado tendo como origem uma solicitação do setor de análise de fraudes 
            BUSINESS: evento registrado tendo como origem uma solicitação do setor de negócios
            AUTOMATIC: evento registrado tendo como origem uma solicitação automatica das jornadas da plataforma
        date:
          type: string
          format: date
        reason:
          type: string
        details:
          type: string
    AuthRequest:
      type: object
      properties:
        grant_type: 
          type: string
          enum: [refreshToken, clientCredentials]
        clientId:
          type: string
          format: uuid
        clientSecret:
          type: string
          format: uuid
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: number
        scopes:
          type: string
    BadRequestResponse:
      type: object
      properties:
        description:
          type: string
          description: Descrição do erro
        fields:
          type: array
          items:
            type: object
            properties:
              fieldPath:
                type: string
                description: caminho completo do campo com erro
              errorDescription:
                type: string
                description: descrição do erro que foi identificado no campo
  responses:
    UnauthorizedError:
      description: Access token não foi informado ou é inválido
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
